/**********************************************************************
 Java CUP specification for a parser for egg programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal StructDeclNode   structDecl;
non terminal LinkedList<DeclNode>     structBody;
non terminal FnDeclNode       fnDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList<DeclNode>     varDeclList;
non terminal StmtNode         stmt;
non terminal LinkedList<StmtNode>     stmtList;
non terminal FormalsListNode  formals;
non terminal LinkedList<FormalDeclNode> formalsList;
non terminal FormalDeclNode   formalDecl;

 
/* NOTE: Add precedence and associativity declarations here */

precedence right ASSIGN;
precedence nonassoc OR;
precedence nonassoc AND;
precedence left EQUALS, NOTEQUALS, LESS, GREATER, LESSEQ, GREATEREQ;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left NOT;

start with program;



/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                | fnDecl:f
                {:
                RESULT = f;
                :}
                | structDecl:sd     // struct definitions only at top level
                {:
                RESULT = sd;
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {:
                RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                | STRUCT id:typeId id:iden SEMICOLON
                {:
                RESULT = new VarDeclNode(new StructNode(typeId), iden, 0);
                :}
                ;
                
fnDecl          ::= type:t id:i formals:f fnBody:fb
                {:
                RESULT = new FnDeclNode(t, i, f, fb);
                :}
                ;

fnBody          ::= LCURLY varDeclList:vList stmtList:sList RCURLY
                {:
                RESULT = new FnBodyNode(new DeclListNode(vList), new StmtListNode(sList));
                :}
                ;
                
formals         ::= LPAREN RPAREN
                {:
                RESULT = new FormalsListNode(new LinkedList<FormalDeclNode>());
                :}
                | LPAREN formalsList:fList RPAREN
                {:
                RESULT = new FormalsListNode(fList);
                :}
                ;

formalsList     ::= formalDecl:f
                {:
                LinkedList<FormalDeclNode> fList = new LinkedList<FormalDeclNode>();
                fList.addLast(f);
                RESULT = fList;
                :}
                | formalDecl:f COMMA formalsList:fList
                {:
                fList.addLast(f);
                RESULT = fList;
                :}
                ;

formalDecl      ::= type:t id:i        // note: no struct parameters
                {:
                RESULT = new FormalDeclNode(t, i);
                :}
                ;
                
varDeclList     ::= varDeclList:vList varDecl:v
                {:
                vList.addLast(v);
                RESULT = vList;
                :}
                | /* epsilon */
                {:
                RESULT = new LinkedList<DeclNode>();
                :}
                ;
                

stmtList        ::= LPAREN//stmtList:sList stmt:s
                //{:
                //sList.addLast(v);
                //RESULT = sList;
                //:}
                //| /* epsilon */
                {:
                RESULT = new LinkedList<StmtNode>();
                :}
                ;
                
//stmt            ::= RETURN SEMICOLON
 //               {:
//                RESULT = new ReturnStmtNode(new ExpNode();
//                :}
//                ;
                
//exp             ::= term:t
//                {:
//                RESULT = new ExpNode(t);
//                :}
//                ;
                
type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
                {: RESULT = new BoolNode();
                :}
                | VOID
                {: RESULT = new VoidNode();
                :}
                ;
                
structDecl      ::= STRUCT id:iden LCURLY structBody:sb RCURLY SEMICOLON
                {:
                DeclListNode sbNode = new DeclListNode(sb);
                RESULT = new StructDeclNode(iden, sbNode);
                :}
                ;

structBody      ::= structBody:sb varDecl:v
                {:
                sb.addLast(v);
                RESULT = sb;
                :}
                | varDecl:v
                {:
                LinkedList<DeclNode> sbList = new LinkedList<DeclNode>();
                sbList.addLast(v);
                RESULT = sbList;
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
				
