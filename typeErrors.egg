
struct bowler {
  int bowlingBalls;
};
struct Player {
  struct bowler bowlingGuy;
  bool dead;
};
int tryToWriteReadMe() {
  	return 4;
}
void writeVoid(){
	return;
}
int wrongParams(int number, bool notNumber){
  	return 4;
}
int hat(){
  	return 4;
}
bool car(){
  	return false;
}
int noReturn(){
  	return;
}
  
void shouldBeNoReturn(){
	return false;
}
  
int wrongType(){
	return false;
}
void f(){}
void g(){}

int TestsForErrors(){
  int i;
  int e;
  bool b;
  int f;
  bool start;
  
  struct bowler bowlerHatMan;
  struct Player Ibra;
  i = 0;
  e = 8;
  start = false;
  b = false;
  
  
  cout << tryToWriteReadMe;
  cout << bowler;
  cout << bowlerHatMan;
  cout << writeVoid();
  cin >> tryToWriteReadMe;
  cin >> bowler;
  cin >> bowlerHatMan;
  
  e = b();
  e = b(3);
  
  
  e = wrongParams(3);
  e = wrongParams(3, 4);
  

  
  e = (i + start);
  e = (i - start);
  e = (i * start);
  e = (i / start);
  start++;
  start--;
  
  b = (i > start);
  b = (i < start);
  b = (i >= start);
  b = (i <= start);
  
  b = (!i);
  b = (i && start);
  b = (i || start);
  if(i){}
  while(i){}
  repeat(start){}
  repeat("not an int"){}
  if(e == true){}
  e = true;
  
  
  if(f() == g()){}
  
  if(car == hat){}
  if(car != hat){}
  

  if(bowler == Player){}
  if(bowler != Player){}
  
  if(bowlerHatMan == Ibra){}
  if(bowlerHatMan != Ibra){}
 
  hat = car;
  bowler = Player;
  bowlerHatMan = Ibra;
  
  bowlerHatMan.bowlingBalls = 3;
  Ibra.bowlingGuy.bowlingBalls = true;
  b = bowlerHatMan.bowlingBalls && false;
  
}

